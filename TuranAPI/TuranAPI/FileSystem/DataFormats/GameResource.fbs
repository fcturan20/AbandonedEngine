//File types of Game Content!

namespace GameContent;

struct Vec3{
    x: float;
    y: float;
    z: float;
}

struct Vec2{
    x: float;
    y: float;
}

struct Vec4{
    x: float;
    y: float;
    z: float;
    w: float;
}

struct Mat4x4{
    ROW_1: Vec4;
    ROW_2: Vec4;
    ROW_3: Vec4;
    ROW_4: Vec4;
}

enum TEXTURE_DIMENSION : ubyte {
    TEXTURE_2D = 0
}

enum TEXTURE_CHANNELs : ubyte {
    TEXTURE_RGB = 0, TEXTURE_RGBA, TEXTURE_DEPTH
}

enum TEXTURE_MIPMAP_FILTERING : ubyte{
    LINEAR_FROM_1MIP = 0, LINEAR_FROM_2MIP, NEAREST_FROM_1MIP, NEAREST_FROM_2MIP
}

enum TEXTURE_WRAPPING : ubyte {
    REPEAT = 0, MIRRORED_REPEAT, CLAMP_TO_EDGE
}

enum TEXTURE_VALUETYPE : ubyte {
    UBYTE8, BYTE8, UINT32, INT32, FLOAT32
}

table TEXTURE{
    WIDTH: uint;
    HEIGHT: uint;
    DATA: [ubyte];
    DIMENSION: TEXTURE_DIMENSION;
    CHANNELs: TEXTURE_CHANNELs;
    VALUE_TYPE: TEXTURE_VALUETYPE;
    MIPMAP_FILTERING: TEXTURE_MIPMAP_FILTERING;
    WRAPPING: TEXTURE_WRAPPING;
}

enum GFX_APIs: ubyte {
    OPENGL3 = 0
}


table UNIFORM_UINT32{
    NAME: string;
    DATA: uint;
}
table UNIFORM_INT32{
    NAME: string;
    DATA: int;
}
table UNIFORM_FLOAT{
    NAME: string;
    DATA: float;
}
table UNIFORM_VEC2{
    NAME: string;
    DATA: Vec2;
}
table UNIFORM_VEC3{
    NAME: string;
    DATA: Vec3;
}
table UNIFORM_VEC4{
    NAME: string;
    DATA: Vec4;
}
table UNIFORM_MAT4x4{
    NAME: string;
    DATA: Mat4x4;
}
table UNIFORM_TEXTURE2D{
    NAME: string;
    DATA: uint;
}

union MATERIAL_INSTANCE_UNIFORM{
    UINT32: UNIFORM_UINT32,
    INT32: UNIFORM_INT32,
    FLOAT: UNIFORM_FLOAT,
    VEC2: UNIFORM_VEC2,
    VEC3: UNIFORM_VEC3,
    VEC4: UNIFORM_VEC4,
    Mat4x4: UNIFORM_MAT4x4,
    TEXTURE2D: UNIFORM_TEXTURE2D
}

table MATERIAL_INSTANCE_UNIFORM_TABLE{
    UNIFORM: MATERIAL_INSTANCE_UNIFORM;
}


//Material Type stores Shader Pipeline resources!
table MATERIAL_TYPE{
    GFX_API: GFX_APIs;
    VERTEX_SHADER: string;
    FRAGMENT_SHADER: string;
    MATERIAL_INPUTs: [MATERIAL_INSTANCE_UNIFORM_TABLE];
}

//Material Instance only stores needed resources like Textures, Uniforms etc.!
//MATERIAL_TYPE_ID stores used Shader Stage's (Vertex and Fragment Shader) ID!
table MATERIAL_INSTANCE{
    MATERIAL_TYPE_ID: ushort;
    UNIFORMs: [MATERIAL_INSTANCE_UNIFORM_TABLE];
}

//Each Mesh will store vertex attributes and material index to reference!
//Material index is index in the Model's MATERIALs vector
table MESH{
	Positions: [Vec3];
    TextCoords: [Vec2];
	Normals: [Vec3];
	Tangents: [Vec3];
	Bitangents: [Vec3];
    Indices: [uint];
}

table STATIC_MODEL{
    MESHes: [MESH];
}



//Define all of the components!
table StaticModel_ComponentTable{
    NAME: string;
    Model_ID: uint;
    //This vector's size should match with attached Static_Model's total material number!
    MaterialInstances_IDs: [uint];
    LOCATION: Vec3;
    ROTATION: Vec3;
    SCALE: Vec3;
}

table Camera_ComponentTable{
    NAME: string;
    LOCATION: Vec3;
    FOV_inAngle: ushort;
    Aspect_WIDTH: ushort;
    Aspect_HEIGHT: ushort;
    Near_Plane: float;
    Far_Plane: float;
    Target: Vec3;
}

union GameComponent_Type{
    StaticModel_Component: StaticModel_ComponentTable,
    Camera_Component: Camera_ComponentTable
}

table GameComponent{
    COMPONENT: GameComponent_Type;
} 

table SCENE{
    NAME: string;
    COMPONENTs: [GameComponent];
}

//Please don't forget that, this should match Resource_Type!
enum File_Type: ubyte { ERROR = 0, Material_Type = 1, Material_Instance, Texture, Static_Model, Scene}

table File{
    PATH: string;
    TYPE: File_Type;
    ID: uint;
}

table FileList{
    FILE_LIST: [File];
    LAST_ID: uint;
}

union Resource_Type {
    Material_Type: MATERIAL_TYPE,
    Material_Instance: MATERIAL_INSTANCE,
    Texture: TEXTURE,
    Static_Model: STATIC_MODEL,
    Scene: SCENE,
    File_List: FileList
}

table Resource{
    TYPE: Resource_Type;
}

root_type Resource;